1. Které tvrzení je **chybné**?
--
`ASP` je programovací jazyk, nástupce `PHP`. 
--
`ASP.NET` je framework pro tvorbu webových aplikací.
--
Technologie `ASP.NET` je vhodná jak pro tvorbu malých webů, tak velkých, korporátních portálů. 
--
Technologie `ASP.NET` je postavena na architektuře klient-server.
{ARTICLE URL: csharp/asp-net-core/zaklady/tutorial-uvod-do-asp-dot-net }

2. Které tvrzení je **chybné**?
--
`ASP.NET` běží na straně klienta. 
--
Výstupem aplikace `ASP.NET` je HTML stránka.
--
`ASP.NET` umožňuje vytvořit dynamický web (diskuzní fóra, přihlašování uživatelů...).
--
`ASP.NET Web Forms` je předchůdce `ASP.NET MVC`.
{ARTICLE URL: csharp/asp-net-core/zaklady/tutorial-uvod-do-asp-dot-net }

3. Které tvrzení je **chybné**?
--
`ASP.NET Core` je předchůdce `ASP.NET MVC`.
--
`Kontroler` získává data od uživatele a komunikuje s modelem.
--
`Model` obsahuje logiku a předává data kontroleru.
--
`Pohled` je šablona, do které se vloží data a vznikne finální HTML stránka.
{ARTICLE URL: csharp/asp-net-core/zaklady/tutorial-uvod-do-asp-dot-net }

4. Které tvrzení je **chybné**?
--
`Desktopové aplikace` vznikly díky dobrým zkušenostem s `Webovými aplikacemi`.  
--
`Mainframe` je centrální, výkonný počítač, který sdílí data s více uživateli. 
--
Výhody `webových aplikací` jsou: snadná správa, snadný přechod na novou verzi, bezpečnost. 
--
`Webová aplikace` je `webová stránka`, která se chová jako `desktopová aplikace` (má přidanou dynamickou funkčnost). 
{ARTICLE URL: csharp/asp-net-core/zaklady/asp-dot-net-tutorial-uvod-do-webovych-aplikaci}

5. Které tvrzení je **chybné**?
--
`View` (pohled) komunikuje přímo s `Modelem`, který mu předává data.
-- 
`MVC` je architektonický vzor, oddělující logiku od výstupu. 
--
Pod `Model` spadají: C# třídy, výpočty, databázové dotazy, validace... 
--
K prvnímu kontaktu mezi uživatelem a aplikací dochází odesláním URL adresy.
{ARTICLE URL: csharp/asp-net-core/zaklady/uvod-do-mvc-architektury-v-aspnet-core}

6. Které tvrzení je **chybné**?
--
Nevýhodou `MVC architektury` je nepřehlednost kódu. 
--
`.NET Core` je multiplatformní.
--
`.NET Core` je open source, spravovaný společností Microsoft. 
--
`ASP.NET MVC` není totéž co `ASP.NET Core MVC`.
{ARTICLE URL: csharp/asp-net-core/zaklady/uvod-do-mvc-architektury-v-aspnet-core}

7. Které tvrzení je **chybné**?
--
`Controller` si můžeme pojmenovat libovolně, např. takto: 
/--code csharp
public class MujKontroler
{
    public IActionResult Index()
    {
        return View();
    }
}
\-- 
-- 
V projektu `ASP.NET Core MVC` ukládáme soubory do 3 hlavních složek „Controllers“, „Models“ a „Views“.   
--
C# třídy ukládáme do složky „Models“.
--
Takto vypadá prázdný `HomeController`: 
/--code csharp
public class HomeController : Controller
{
    public IActionResult Index()
    {
        return View();
    }
}
\--
{ARTICLE URL: csharp/asp-net-core/zaklady/prvni-webova-aplikace-v-aspnet-core-mvc}

8. Které tvrzení je **chybné**?
--
Razor direktiv by v šablonách mělo být co možná nejvíce.  
--
Kolekce `ViewBag` slouží k předávání dat mezi kontrolerem a pohledem.
--
Novou HTML šablonu nejsnáze vytvoříme volbou `Add View` z příslušného kontroleru. 
--
`Razor` je syntaxe, umožňující vložit C# kód do HTML, např.:
/--code csharp
<p>@ViewBag.Cislo</p>
\--
{ARTICLE URL: csharp/asp-net-core/zaklady/prvni-webova-aplikace-v-aspnet-core-mvc}

9. Které tvrzení je **chybné**?
--
Pojem `middleware` označuje veškerý C# kód obsažený v souboru `Startup.cs`. 
--
Pojem `routování` označuje napojení URL adres na kontrolery nebo jiné části aplikace.
--
Nastavení `routování` provádíme v souboru `Startup.cs`.
--
`Middleware` pro nasměrování na `HomeController` vypadá takto:
/--code csharp
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.UseMvcWithDefaultRoute(); 
    ...
\--
{ARTICLE URL: csharp/asp-net-core/zaklady/prvni-webova-aplikace-v-aspnet-core-mvc}

10. Které tvrzení je **chybné**?
--
Třída může mít stený název, jako je název projektu. 
--
`Binding` je technika najpojení modelu na pohled:
/--code csharp
@model MVCSifrator.Models.Sifrator
\--
--
`Scaffolding` je technika generování kódu. Na základě C# kódu modelu je vygenerován odpovídající HTML kód pohledu. 
--
Instanci modelu můžeme předat pohledu jako parametr v metodě View():
/--code csharp
public IActionResult Index()
{
    Sifrator sifrator = new Sifrator();
    return View(sifrator);
}
\--
{ARTICLE URL: csharp/asp-net-core/zaklady/obsluha-formularu-v-aspnet-core-mvc}

11. Které tvrzení je **chybné**?
--
ASP.NET Core MVC je pokročilá architektura, která nevyžaduje „přidávání usingů“.
--
`Tag Helpers` umožňují propojit HTML se C# kódem (asp-...), např.:
/--code csharp
<label asp-for="Cislo" class="control-label"></label>
\--
--
Máme-li na vybranou, použijeme raději `Tag Helpers`, než starší systém: `Html Helpers` (@Html). 
--
`Scaffolding` vyžaduje zvolení `Model class`, podle které se kód vygeneruje.
{ARTICLE URL: csharp/asp-net-core/zaklady/obsluha-formularu-v-aspnet-core-mvc}

12. Které tvrzení je **chybné**?
--
Atribut `[HttpPost]` můžeme použít takto: 
/--code csharp
public IActionResult Index(Sifrator sifrator)
{
    if (ModelState.IsValid)
    {
	[HttpPost]
        sifrator.Zasifruj();
    }
    return View(sifrator);
}
\-- 
--
Pomocí třídy `ModelState` a její vlastnosti `.IsValid` můžeme zjistit, je-li odeslaný formulář validní.
--
`PostBack` označuje odeslání formuláře na stránku, která ho má zpracovat.
--
Metoda označená atributem [HttpPost] se spustí pouze v případě, že se odeslal formulář.   
{ARTICLE URL: csharp/asp-net-core/zaklady/zpracovani-dat-a-validace-v-aspnet-core-mvc}

13. Které tvrzení je **chybné**?
--
`ViewModel` je označení pro nevhodnou strukturu zdrojového kódu, kdy je smíchán kód pohledu a modelu, tzv. „špagetový kód“.  
--
Názvy vlastností zobrazované formulářem je možné upravit v modelu pomocí atributů:
/--code csharp
[Display(Name = "1. číslo")]
public double Cislo1 { get; set; }
--/
--
Metodou `POST` se předávají data uvnitř HTTP požadavku. 
--
Metodou `GET` se předávají data přímo v URL adrese.  
{ARTICLE URL: csharp/asp-net-core/zaklady/zpracovani-dat-a-validace-v-aspnet-core-mvc}

14. Které tvrzení je **chybné**?
--
Toto je parametr („jmeno“) předaný metodou `POST`:
/--code csharp
http://localhost:50912/Home/Index?jmeno=Pavla
--/
--
Pro předávání dat, mezi klientem a serverem, jsou nejčastěji využívány metody `GET` a `POST`.
--
Validace datového typu se generují automaticky, na straně klienta i na straně serveru.
--
Validaci rozsahu přidáme v modelu atributem `[Range()]`.
{ARTICLE URL: csharp/asp-net-core/zaklady/zpracovani-dat-a-validace-v-aspnet-core-mvc}

15. Které tvrzení je **chybné**?
--
`Server Explorer` zobrazuje strukturu projektu, umožňuje spravovat složky a soubory.  
--
Ve Visual Studiu si můžeme založit prázdný projekt (Empty), nebo využít připravenou šablonu pro webovou aplikaci s MVC architekturou. 
--
Složka `wwwroot` obsahuje statický obsah webu: CSS, Bootstrap, jQuery, obrázky...
--
Soubor `HomeController.cs` zpravidla nalezneme ve složce Controllers - přes okno: `Solution Explorer`.
{ARTICLE URL: csharp/asp-net-core/zaklady/uprava-template-mvc-v-aspnet-core}


16. Které tvrzení je **chybné**?
--
Jeden `Controller` ovládá vždy jen jeden `View`.
--
`View-model` je C# třída (Model), sloužící jako objektový kontejner pro data, ze kterých je vygenerován pohled (View).
--
Soubor `_Layout.cshtml` je společná HTML šablona, která obaluje jednotlivé podstránky.
--
Odkaz na jinou HTML stránku umožní atributy `asp-controller` a `asp-action`: 
/--code csharp
<a asp-controller="Home" asp-action="Contact">Kontakt</a>
 --/
{ARTICLE URL: csharp/asp-net-core/zaklady/uprava-template-mvc-v-aspnet-core}

17. Které vysvětlení kódu je **chybné**?
--
/--code csharp
@RenderBody()
--/
Každá podstránka musí začínat metodou `RenderBody()`, aby se vykreslila do layoutu. 
--
/--code csharp
<button asp-controller="Home" asp-action="Index">Domů</button>
--/
Stisk tlačítka spustí metodu `Index()` v  `Home.Controller.cs`.
--
/--code csharp
public IActionResult Index()
{
    return View();
}
--/
Metoda `Index()` zobrazí pohled `Index.cshtml`.
--
/--code csharp
<h1>@ViewData["Title"]</h1>
--/
`ViewData` zobrazí titulek. Titulek bude mít podobu nadpisu první úrovně. 
{ARTICLE URL: csharp/asp-net-core/zaklady/uprava-template-mvc-v-aspnet-core}

18. Které tvrzení je **chybné**?
--
S `Entity Framework` můžeme pracovat dvěma způsoby: `Code First` nebo `View First`. 
--
`Scaffolding` je kostra (lešení) aplikace - vygenerovaná vývojovým prostředím. 
--
`Scaffolding` zjednodušuje práci programátora a redukuje psaní stereotypního kódu. 
--
`Entity Framerwork Core` je technologie pro práci s databází.  
{ARTICLE URL: csharp/asp-net-core/zaklady/scaffolding-a-entity-framework-v-aspnet-core-mvc}

19. Které tvrzení je **chybné**?
--
Při oběktově relačním mapování se automaticky vygenerovaná databáze vždy ukládá do složky projektu. 
--
Při ORM se databázové tabulky převedou na C# třídy (Database First) nebo opačně (Code First).
--
Při ORM pracujeme jen s objekty, znalost MS-SQL nepotřebujeme. SQL dotazy generuje framework na pozadí.
--
Entity Framework je ORM pro .NET. 
{ARTICLE URL: csharp/asp-net-core/zaklady/scaffolding-a-entity-framework-v-aspnet-core-mvc}

20. Které tvrzení je **chybné**?
--
`Package Manager Console` je okno pro správu `NuGet` balíčků.  
--
Přes volbu `Add - New Scaffolded Item` nám Entity Framework může vygenerovat kód (ORM).   
--
Kdykoliv vytvoříme nový databázový model (nebo jej změníme), musíme provést `Migraci` a následně databázi updatovat.   
--
Tento kód zajistí získání článku z databáze na základě Id: 
/--code csharp
var article = await _context.Article.SingleOrDefaultAsync(m => m.Id == id);
--/
{ARTICLE URL: csharp/asp-net-core/zaklady/scaffolding-a-entity-framework-v-aspnet-core-mvc}

21. Které tvrzení je **chybné**?
--
/--code csharp
<form asp-action="Delete">
    ...
</form>
--/
Tento kód je umístěn v Controlleru.
--
Vlastnost databázové položky můžeme na stránce zobrazit pomocí Html Helperu: 
/--code csharp
@item.Vlastnost 
--/
--
Tento Html Helper využijeme pokud vlastnost není typu string nebo chceme-li provést ještě formátování: 
/--code csharp
@Html.DisplayFor(modelItem => item.Vlastnost)
--/
--
/--code csharp
@Html.Raw(Model.Content)
--/
Obsah se vypíše tak, jak je. Neprovede se žádné HTML kódování. 
{ARTICLE URL: csharp/asp-net-core/zaklady/uprava-administrace-clanku-a-editor-v-aspnet-core-mvc}

22. Které tvrzení je **chybné**?
--
`JavaScriptové soubory` ukládáme do složky Views k příslušnému pohledu. 
--
Aby pohled spolupracoval s modelem, je potřeba nastavit pohledu odkaz. Např: 
/--code csharp
@model IEnumerable<AspBlog.Models.Article>
--/
--
`WYSIWYG editory` vytváří dokumenty. Vzhled dokumentu vytvořený v editoru bude stejný i na webu nebo v tištěné verzi.
--
Odkaz na JavaScriptové soubory vkládáme do layoutu před konec elementu </body> nebo do sekce `Scripts` v konkrétním pohledu. 
{ARTICLE URL: csharp/asp-net-core/zaklady/uprava-administrace-clanku-a-editor-v-aspnet-core-mvc}

23. Který z kódů se **netýká validace**?
--
/--code csharp
public void ConfigureServices(IServiceCollection services)
{
services.AddControllersWithViews();
}
--/
--
/--code csharp
[Required (ErrorMessage = "Vyplňte obsah")]
public string Jmeno { get; set; }
--/
--
/--code csharp
[Range(1, 50, ErrorMessage = "Zadejte prosím číslo od 1 do 50.")]
public double Cislo { get; set; }
--/
--
/--code csharp
[StringLength(6)]
public string Heslo { get; set; }
--/
{ARTICLE URL: csharp/asp-net-core/zaklady/prihlaseni-a-registrace-v-aspnet-core-mvc}

24. Které tvrzení je **chybné**?
--
`Dependency Injection` přidáváme do kontroleru jako using.  
--
V ASP.NET Core se pro správu uživatelů využívá mechanismus `Identity`.
--
Pro přihlášení uživatelů je nezbytný `Viewmodel`, obvykle s vlastnostmi Email a Heslo.
--
Konstruktor `AccountControlleru` přebírá v parametrech instance tříd `userManager` a `signInManager`. 
{ARTICLE URL: csharp/asp-net-core/zaklady/prihlaseni-a-registrace-v-aspnet-core-mvc}

25. Které tvrzení je **chybné**?
--
Atributem [Authorize] označujeme část HTML kódu, který se má zobrazit jen přihlášeným uživatelům. 
--
Výraz `await` způsobí pozastavení provádění asynchronní funkce dokud neobdržíme výsledek. 
--
`Asynchronní metody` nevrací svou hodnotu hned, ale až po nějakém časovém intervalu. 
--
Dependency Injection musí být zaregistrována ve `Startup.cs` v metodě `ConfigureServices()`.
{ARTICLE URL: csharp/asp-net-core/zaklady/prihlaseni-a-registrace-v-aspnet-core-mvc}

26. Které tvrzení je **chybné**?
--
Každý uživatel by měl mít jen jednu roli, jinak by bylo obtížné spravovat oprávnění.
--
AccountController obvykle obsahuje metody `Login()`, `Logout()`, `Register()` a `RedirectToLocal()`.
--
Metody `Login()` a `Register()` označené `[HttpGet]`, vrací příslušný pohled s formulářem.
--
Uživatele tvoříme jako novou instanci třídy `IdentityUser`:
/--code csharp
var user = new IdentityUser { UserName = model.Email, Email = model.Email };
 --/
{ARTICLE URL: csharp/asp-net-core/zaklady/uzivatelske-role-v-aspnet-core-mvc-a-dokonceni-blogu}